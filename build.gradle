group("com.tabuyos.apache")
version("0.1.0")

def projectVersion = version
def groupId = group
def junitJupiterVersion = "5.7.0"
def hutoolVersion = "5.5.1"
def mariadbVersion = "2.6.0"
def mybatisSpringVersion = "2.1.4"
def mybatisPlusVersion = "3.4.1"
def springCloudVersion = "2020.0.2"
def springBootVersion = "2.4.4"
def dependencyManagementVersion = "1.0.11.RELEASE"
def removeParentSrc = true

static def deleteDirectory(File file) {
    if (file.isFile()) {
        return file.delete()
    } else {
        file.listFiles().each {
            deleteDirectory(it)
        }
    }
    return file.delete()
}

allprojects {
    group(groupId)
    version(projectVersion)

    repositories {
        mavenLocal()
        maven {
            url "https://maven.aliyun.com/repository/public"
            name "AliyunPublic"
        }
        mavenCentral()
    }
}

subprojects {
    apply plugin: "java"

    repositories {
        mavenCentral()
    }

    configurations {
        developmentOnly
        runtimeClasspath {
            extendsFrom developmentOnly
        }
        compileOnly {
            extendsFrom annotationProcessor
        }
    }

    dependencies {
        implementation(platform("org.springframework.boot:spring-boot-dependencies:${springBootVersion}"))
        implementation(platform("org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"))

        testImplementation("org.junit.jupiter:junit-jupiter:${junitJupiterVersion}")
        testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine")

        developmentOnly("org.springframework.boot:spring-boot-devtools:${springBootVersion}")
        annotationProcessor("org.springframework.boot:spring-boot-configuration-processor:${springBootVersion}")
    }

    configurations {
        all {
            implementation.exclude group: "org.springframework.boot", module: "spring-boot-starter-logging"
        }
    }

    compileJava.inputs.files(processResources)

    test {
        useJUnitPlatform()
        jvmArgs("--illegal-access=deny")
        jvmArgs("--add-opens", "java.base/java.lang=ALL-UNNAMED")
    }

    java {
        sourceCompatibility = JavaVersion.VERSION_15
        targetCompatibility = JavaVersion.VERSION_15
    }

    tasks.withType(JavaCompile) {
        options.encoding = "UTF-8"
    }

    task createSrcDirs {
        sourceSets*.java.srcDirs*.each {
            it.mkdirs()
        }
        sourceSets*.resources.srcDirs*.each {
            it.mkdirs()
        }
    }

    task createBuildScript {
        dependsOn(createSrcDirs)
        File file = new File("${projectDir}${File.separator}build.gradle")
        if (!file.exists()) {
            file.createNewFile()
        }
        if (removeParentSrc) {
            file = new File("${file.getParentFile().getParent()}${File.separator}src")
            if (file.exists()) {
                deleteDirectory(file)
            }
        }
    }
}
